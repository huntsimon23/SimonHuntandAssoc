{"version":3,"sources":["components/Calendly.js","components/Button.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Calendly","className","data-url","style","Component","Button","href","this","props","link","type","name","Header","backgroundImage","src","alt","height","Footer","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAUiBA,E,uKANb,OACI,yBAAKC,UAAU,yBAAyBC,WAAS,gDAAgDC,MAAO,CAAC,SAAW,QAAS,OAAS,e,GAHvHC,aCaRC,E,uKAXf,OACA,6BACA,uBAAGC,KAAMC,KAAKC,MAAMC,MACjB,4BAAQC,KAAK,SACVT,UAAU,gBACZM,KAAKC,MAAMG,Y,GAPMP,aC6BJQ,E,uKA1Bb,OACI,6BACI,yBAAKX,UAAU,uBAAuBE,MAAO,CAACU,gBAAiB,oCAC3D,yBAAKZ,UAAU,OACX,yBAAKa,IAAI,yBAAyBb,UAAU,kBAAkBc,IAAI,gBAEtE,yBAAKd,UAAU,OACX,yBAAKA,UAAU,MAAME,MAAO,CAACa,OAAQ,MACrC,uOACA,kBAAC,EAAD,CACAL,KAAK,wBACLF,KAAK,kCAEL,kBAAC,EAAD,CACAE,KAAK,cACLF,KAAK,iD,GAjBJL,aCUJa,E,uKATb,OACI,6BACI,gCAAQ,uBAAGd,MAAO,CAACe,UAAW,WAAtB,yD,GAJCd,aCkBNe,MAdf,WACE,OACE,yBAAKlB,UAAU,uBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACf,kBAAC,EAAD,QAGF,kBAAC,EAAD,QCHcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.68da0489.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Calendly extends Component {\n    render(){\n    return (\n        <div className=\"calendly-inline-widget\" data-url=\"https://calendly.com/huntsimon23/consultation\" style={{\"minWidth\":\"320px\", \"height\":\"630px\"}}>\n        </div>  \n    )}\n  }\n  \n  export default Calendly;\n","import React, {Component} from 'react';\n\nclass Button extends Component {\nrender(){\nreturn (\n<div>\n<a href={this.props.link}>\n   <button type=\"button\"\n      className=\"btn btn-dark\">\n   {this.props.name}\n   </button>\n</a>\n</div>\n)} \n}\nexport default Button;","import React, { Component } from 'react';\nimport Button from './Button';\n\nclass Header extends Component {\n    render(){\n    return (\n        <div>\n            <div className=\"jumbotron header row\" style={{backgroundImage: \"url('assets/codeskillsBKG.png')\"}}>\n                <div className=\"col\">\n                    <img src=\"./assets/SimonHunt.jpg\" className=\"img-fluid simon\" alt=\"Simon Hunt\"/>\n                </div>\n                <div className=\"col\">\n                    <div className=\"row\" style={{height: 10}}></div>\n                    <h6>I am an insurance agent, entrepreneuer, web developer, and Celebrate Recovery leader.  Use calendar below to schedule a 30 minute consultation (via zoom or phone) to discuss how I can best serve you!</h6>\n                    <Button \n                    name=\"Simon's web portfolio\"\n                    link=\"http://freshcoconut.solutions\"\n                    />\n                    <Button \n                    name=\"email Simon\"\n                    link=\"mailto:freshcoconutsoluions@gmail.com\"\n                    />\n                </div>    \n            </div>      \n        </div>\n            \n                \n               \n    )}\n  }\n  \n  export default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render(){\n    return (\n        <div>\n            <footer><p style={{textAlign: \"center\"}}>\n                Copyright 2020, Simon Hunt and Associates, Inc.\n            </p></footer>\n        </div>  \n    )}\n  }\n  \n  export default Footer;","import React from 'react';\nimport './App.css';\nimport Calendly from './components/Calendly';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid\">\n      <Header />\n      <div className=\"row\">\n        <div className=\"col\">\n        <Calendly />\n        </div>\n      </div>\n      <Footer /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}