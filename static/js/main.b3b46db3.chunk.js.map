{"version":3,"sources":["components/Calendly.js","components/Button.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Calendly","className","data-url","style","Component","Button","href","this","props","link","type","name","Header","backgroundImage","src","alt","class","Footer","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAUiBA,E,uKANb,OACI,yBAAKC,UAAU,yBAAyBC,WAAS,gDAAgDC,MAAO,CAAC,SAAW,QAAS,OAAS,e,GAHvHC,aCaRC,E,uKAXf,OACA,6BACA,uBAAGC,KAAMC,KAAKC,MAAMC,MACjB,4BAAQC,KAAK,SACVT,UAAU,gBACZM,KAAKC,MAAMG,Y,GAPMP,aCsDJQ,E,uKAnDb,OACA,6BACI,yBAAKX,UAAU,mBAAmBE,MAAO,CAACU,gBAAiB,oCACvD,yBAAKZ,UAAU,OACX,yBAAKA,UAAU,OACX,4CAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKa,IAAI,yBAAyBb,UAAU,kBAAkBc,IAAI,gBAEtE,yBAAKd,UAAU,OACX,4BAAI,wBAAIA,UAAU,cACd,wBAAIA,UAAU,mBAAd,mBACA,wBAAIA,UAAU,mBAAd,iBACA,wBAAIA,UAAU,uBAAsB,uBAAGK,KAAK,iCAAR,mBAEpC,gCAIZ,yBAAKL,UAAU,OACX,yBAAKA,UAAU,OACX,sDAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACf,kBAAC,EAAD,CACIU,KAAK,wBACLF,KAAK,gBAIb,6BACA,yBAAKR,UAAU,OACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,OACX,uBAAGK,KAAK,yCAAwC,uBAAGU,MAAM,4BAE7D,yBAAKf,UAAU,OACX,uBAAGK,KAAK,0CAAyC,uBAAGU,MAAM,8BAE9D,yBAAKf,UAAU,e,GA9CVG,aCUJa,E,uKATb,OACI,6BACI,gCAAQ,uBAAGd,MAAO,CAACe,UAAW,WAAtB,wD,GAJCd,aCkBNe,MAdf,WACE,OACE,yBAAKlB,UAAU,uBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,uBAAGU,KAAK,YAAW,kBAAC,EAAD,SAGvB,kBAAC,EAAD,QCHcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b3b46db3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Calendly extends Component {\n    render(){\n    return (\n        <div className=\"calendly-inline-widget\" data-url=\"https://calendly.com/huntsimon23/consultation\" style={{\"minWidth\":\"320px\", \"height\":\"630px\"}}>\n        </div>  \n    )}\n  }\n  \n  export default Calendly;\n","import React, {Component} from 'react';\n\nclass Button extends Component {\nrender(){\nreturn (\n<div>\n<a href={this.props.link}>\n   <button type=\"button\"\n      className=\"btn btn-dark\">\n   {this.props.name}\n   </button>\n</a>\n</div>\n)} \n}\nexport default Button;","import React, { Component } from 'react';\nimport Button from './Button';\n\nclass Header extends Component {\nrender(){\n    return (\n    <div>\n        <div className=\"jumbotron header\" style={{backgroundImage: \"url('assets/codeskillsBKG.png')\"}}>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h3>Simon Hunt</h3>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <img src=\"./assets/SimonHunt.jpg\" className=\"img-fluid simon\" alt=\"Simon Hunt\"/>\n                </div>\n                <div className=\"col\">\n                    <h6><ul className=\"list-group\">\n                        <li className=\"list-group-item\">Insurance Agent</li>  \n                        <li className=\"list-group-item\">Entrepreneuer</li>\n                        <li className=\"list-group-item web\"><a href=\"http://freshcoconut.solutions\">Web Developer</a></li>\n                        </ul>\n                        <br/>\n                    </h6>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h4>How can I serve you?</h4>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                <Button \n                    name=\"Schedule Consultation\"\n                    link=\"#calendly\"\n                />\n                </div>\n            </div>\n            <hr />\n            <div className=\"row\">\n                <div className=\"col\" />\n                <div className=\"col\">\n                    <a href=\"mailto:freshcoconutsoluions@gmail.com\"><i class=\"far fa-envelope fa-lg\"></i></a>\n                </div>\n                <div className=\"col\">\n                    <a href=\"https://www.facebook.com/SimonHuntInc/\"><i class=\"fab fa-facebook-f fa-lg\"></i></a>\n                </div>\n                <div className=\"col\" />\n            </div>\n        </div>        \n    </div>                \n    )}\n  }\n  \n  export default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render(){\n    return (\n        <div>\n            <footer><p style={{textAlign: \"center\"}}>\n                Copyright 2020 Simon Hunt and Associates, Inc.\n            </p></footer>\n        </div>  \n    )}\n  }\n  \n  export default Footer;","import React from 'react';\nimport './App.css';\nimport Calendly from './components/Calendly';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid\">\n      <Header />\n      <div className=\"row\">\n        <div className=\"col\">\n          <a name=\"calendly\"><Calendly /></a>\n        </div>\n      </div>\n      <Footer /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}